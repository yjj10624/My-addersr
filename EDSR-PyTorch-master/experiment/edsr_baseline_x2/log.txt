EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 14.3843]	17.4+158.6s
[3200/16000]	[L1: 10.7492]	5.0+171.3s
[4800/16000]	[L1: 9.1568]	5.0+157.2s
[6400/16000]	[L1: 8.2630]	5.0+154.7s
[8000/16000]	[L1: 7.6740]	5.0+151.7s
[9600/16000]	[L1: 7.2397]	5.0+148.4s
[11200/16000]	[L1: 6.9120]	5.0+154.3s
[12800/16000]	[L1: 6.6632]	5.0+152.2s
[14400/16000]	[L1: 6.4593]	5.1+142.9s
[16000/16000]	[L1: 6.2773]	5.1+147.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 14.3842]	21.7+169.5s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 489939360.0000]	17.2+162.4s
[3200/16000]	[L1: 486925760.0000]	4.0+148.6s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d(
      (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ReLU(inplace=True)
        (2): adder2d(
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (16): adder2d(
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d(
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d(
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 483134464.0000]	21.8+177.4s
[3200/16000]	[L1: 480118912.0000]	3.9+156.4s
[4800/16000]	[L1: 477138080.0000]	3.9+147.3s
[6400/16000]	[L1: 474188064.0000]	3.8+154.1s
[8000/16000]	[L1: 471266784.0000]	3.9+156.4s
[9600/16000]	[L1: 468371712.0000]	4.1+142.3s
[11200/16000]	[L1: 465501728.0000]	4.2+156.8s
[12800/16000]	[L1: 462655616.0000]	4.0+157.4s
[14400/16000]	[L1: 459832288.0000]	4.0+148.8s
[16000/16000]	[L1: 457031072.0000]	3.9+145.8s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 483134464.0000]	24.5+187.9s
[3200/16000]	[L1: 480118912.0000]	3.6+170.6s
[4800/16000]	[L1: 477138080.0000]	3.6+154.8s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 57.4042]	19.7+165.1s
[3200/16000]	[L1: 45.9379]	4.6+164.2s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 483399200.0000]	25.7+156.2s
[3200/16000]	[L1: 480383552.0000]	7.4+149.6s
[4800/16000]	[L1: 477402400.0000]	7.5+155.0s
[6400/16000]	[L1: 474452160.0000]	7.5+151.2s
[8000/16000]	[L1: 471530592.0000]	7.6+141.2s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[L1: 483399200.0000]	24.4+161.7s
[3200/16000]	[L1: 480383552.0000]	8.3+149.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): ReLU(inplace=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[100/800]	[L1: 1248913260544.0000]	15.3+39.7s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[100/800]	[L1: 1248913260544.0000]	15.7+40.2s
[200/800]	[L1: 1241149734912.0000]	14.0+31.7s
[300/800]	[L1: 1233499455488.0000]	14.2+31.9s
[400/800]	[L1: 1225936732160.0000]	14.3+32.0s
[500/800]	[L1: 1218459860992.0000]	14.4+32.1s
[600/800]	[L1: 1211024408576.0000]	14.2+32.0s
[700/800]	[L1: 1203657900032.0000]	14.2+32.0s
[800/800]	[L1: 1196369903616.0000]	14.1+32.0s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[100/800]	[L1: 1248913260544.0000]	15.1+41.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 1248924925952.0000]	32.9+92.7s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 1248924925952.0000]	30.8+84.5s
[400/1600]	[L1: 1241166905344.0000]	29.4+77.5s
[600/1600]	[L1: 1233534713856.0000]	29.4+77.6s
[800/1600]	[L1: 1225958359040.0000]	29.4+77.5s
[1000/1600]	[L1: 1218442690560.0000]	29.5+77.5s
[1200/1600]	[L1: 1211012349952.0000]	29.5+77.7s
[1400/1600]	[L1: 1203653705728.0000]	29.5+77.7s
[1600/1600]	[L1: 1196338839552.0000]	29.5+77.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 1052084900143705039568896.0000]	30.5+84.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 3291294874137001984.0000]	29.2+82.0s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 3664327213056.0000]	31.5+86.5s
[400/1600]	[L1: 3660728762368.0000]	29.4+77.3s
[600/1600]	[L1: 3659220647936.0000]	29.5+77.5s
[800/1600]	[L1: 3660210503680.0000]	29.4+77.4s
[1000/1600]	[L1: 3659638767616.0000]	29.5+77.3s
[1200/1600]	[L1: 3659150131200.0000]	29.5+77.4s
[1400/1600]	[L1: 3659087478784.0000]	29.7+78.1s
[1600/1600]	[L1: 3658788110336.0000]	30.2+79.0s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 72.3289]	7.6+30.9s
[400/1600]	[L1: 76.0893]	1.9+20.8s
[600/1600]	[L1: 70.7067]	1.9+21.2s
[800/1600]	[L1: 68.7987]	1.9+19.2s
[1000/1600]	[L1: 67.7761]	2.0+17.0s
[1200/1600]	[L1: 66.8249]	2.0+17.9s
[1400/1600]	[L1: 65.8633]	2.0+16.6s
[1600/1600]	[L1: 69.2908]	1.9+16.6s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[200/1600]	[L1: 18.9336]	6.1+32.8s
[400/1600]	[L1: 14.5377]	1.8+16.5s
[600/1600]	[L1: 12.3415]	1.9+18.0s
[800/1600]	[L1: 11.0737]	1.8+17.8s
[1000/1600]	[L1: 10.2171]	1.8+17.1s
[1200/1600]	[L1: 9.5379]	1.9+17.3s
[1400/1600]	[L1: 9.0088]	1.8+17.5s
[1600/1600]	[L1: 8.5908]	1.8+16.6s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-3
[200/1600]	[L1: 1182089740288.0000]	41.9+99.7s
[400/1600]	[L1: 1112854757376.0000]	32.1+86.0s
[600/1600]	[L1: 1048725291008.0000]	32.5+86.8s
[800/1600]	[L1: 988690120704.0000]	32.2+86.3s
[1000/1600]	[L1: 932242456576.0000]	32.4+86.8s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1047964942336.0000]	30.8+85.7s
[400/1600]	[L1: 877358153728.0000]	30.0+79.2s
[600/1600]	[L1: 736852836352.0000]	30.1+79.2s
[800/1600]	[L1: 620283822080.0000]	29.4+77.5s
[1000/1600]	[L1: 524063080448.0000]	29.5+77.5s
[1200/1600]	[L1: 446307926016.0000]	29.7+78.1s
[1400/1600]	[L1: 384553254912.0000]	29.4+77.5s
[1600/1600]	[L1: 336617472000.0000]	33.5+86.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 3761740709888.0000]	35.8+86.1s
[400/1600]	[L1: 3744834256896.0000]	29.8+78.1s
[600/1600]	[L1: 3768333107200.0000]	30.2+78.7s
[800/1600]	[L1: 3808579813376.0000]	30.3+79.4s
[1000/1600]	[L1: 3803054080000.0000]	30.1+79.0s
[1200/1600]	[L1: 3788252905472.0000]	30.1+79.3s
[1400/1600]	[L1: 3788118687744.0000]	29.7+78.1s
[1600/1600]	[L1: 3775628574720.0000]	29.6+77.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1047964942336.0000]	56.2+92.7s
[400/1600]	[L1: 877358153728.0000]	30.5+80.1s
[600/1600]	[L1: 736852836352.0000]	30.6+80.2s
[800/1600]	[L1: 620283822080.0000]	30.6+80.4s
[1000/1600]	[L1: 524063080448.0000]	30.5+80.4s
[1200/1600]	[L1: 446307926016.0000]	30.7+80.7s
[1400/1600]	[L1: 384553254912.0000]	30.6+80.4s
[1600/1600]	[L1: 336617472000.0000]	30.6+80.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1047964942336.0000]	35.0+76.4s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Power_Activation()
        (4): adder2d()
        (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (6): Power_Activation()
      )
      (abc): Power_Activation()
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
        (1): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 30.3248]	9.8+31.1s
[400/1600]	[L1: 22.3807]	3.0+19.9s
[600/1600]	[L1: 19.3327]	3.0+18.3s
[800/1600]	[L1: 17.6456]	3.0+18.9s
[1000/1600]	[L1: 17.0797]	3.0+17.1s
[1200/1600]	[L1: 15.8668]	3.0+16.4s
[1400/1600]	[L1: 14.8905]	3.1+17.6s
[1600/1600]	[L1: 14.0597]	3.0+15.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 2282669568.0000]	32.1+83.9s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 2428895488.0000]	31.4+85.3s
[400/1600]	[L1: 1778616448.0000]	29.9+76.3s
[600/1600]	[L1: 1443483904.0000]	30.0+76.5s
[800/1600]	[L1: 1205902848.0000]	30.1+76.6s
[1000/1600]	[L1: 1085685120.0000]	30.1+76.9s
[1200/1600]	[L1: 969599360.0000]	30.0+76.7s
[1400/1600]	[L1: 883426432.0000]	30.1+76.7s
[1600/1600]	[L1: 810020288.0000]	30.1+76.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): ReLU(inplace=True)
        (2): adder2d()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1047964942336.0000]	29.5+80.5s
[400/1600]	[L1: 877358153728.0000]	28.1+72.6s
[600/1600]	[L1: 736852836352.0000]	28.2+72.4s
[800/1600]	[L1: 620283822080.0000]	28.3+72.8s
[1000/1600]	[L1: 524063080448.0000]	28.3+73.0s
[1200/1600]	[L1: 446307926016.0000]	28.0+72.2s
[1400/1600]	[L1: 384553254912.0000]	26.9+69.0s
[1600/1600]	[L1: 336617472000.0000]	26.9+68.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 2379050496.0000]	30.7+81.1s
[400/1600]	[L1: 1717680256.0000]	28.5+72.1s
[600/1600]	[L1: 1368896640.0000]	28.6+72.2s
[800/1600]	[L1: 1193052672.0000]	28.5+72.4s
[1000/1600]	[L1: 1056280768.0000]	28.6+72.6s
[1200/1600]	[L1: 949506560.0000]	28.6+72.5s
[1400/1600]	[L1: 856559616.0000]	28.8+73.0s
[1600/1600]	[L1: 787893376.0000]	28.7+72.6s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1607341824.0000]	28.7+77.0s
[400/1600]	[L1: 1272198400.0000]	27.4+68.4s
[600/1600]	[L1: 1055040768.0000]	27.4+68.6s
[800/1600]	[L1: 895648704.0000]	27.4+68.5s
[1000/1600]	[L1: 1442167296.0000]	27.4+68.7s
[1200/1600]	[L1: 1484562304.0000]	27.5+68.7s
[1400/1600]	[L1: 1310744192.0000]	27.5+68.7s
[1600/1600]	[L1: 1180215040.0000]	27.4+68.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 1.00e-3
[200/1600]	[L1: 2150168832.0000]	28.6+77.2s
[400/1600]	[L1: 1647783936.0000]	27.3+68.4s
[600/1600]	[L1: 1414070400.0000]	27.3+68.5s
[800/1600]	[L1: 1242356224.0000]	27.4+68.7s
[1000/1600]	[L1: 1139883648.0000]	27.5+68.8s
[1200/1600]	[L1: 1055861824.0000]	27.5+68.8s
[1400/1600]	[L1: 971201664.0000]	28.2+70.3s
[1600/1600]	[L1: 907712576.0000]	27.7+69.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 1.00e-3
[200/1600]	[L1: 132571.2969]	8.2+20.5s
[400/1600]	[L1: 74720.5938]	7.0+12.2s
[600/1600]	[L1: 52595.3828]	7.0+13.7s
[800/1600]	[L1: 40836.0000]	6.9+11.9s
[1000/1600]	[L1: 33446.9141]	6.9+11.9s
[1200/1600]	[L1: 28374.7734]	7.0+12.8s
[1400/1600]	[L1: 24687.9980]	6.9+11.2s
[1600/1600]	[L1: 21896.5957]	6.9+11.8s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 51091.1953]	9.5+24.6s
[400/1600]	[L1: 27672.7695]	6.9+13.9s
[600/1600]	[L1: 19255.4375]	6.9+14.2s
[800/1600]	[L1: 14869.5283]	6.9+14.1s
[1000/1600]	[L1: 12148.0264]	6.9+13.0s
[1200/1600]	[L1: 10289.7969]	6.9+13.2s
[1400/1600]	[L1: 8936.3135]	7.0+11.7s
[1600/1600]	[L1: 7908.3574]	6.9+12.0s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 49323.3438]	10.9+38.7s
[800/4000]	[L1: 26613.8750]	9.6+26.4s
[1200/4000]	[L1: 18444.3594]	9.8+26.5s
[1600/4000]	[L1: 14218.3447]	10.2+26.3s
[2000/4000]	[L1: 11601.4219]	10.5+25.7s
[2400/4000]	[L1: 9814.9053]	10.3+29.3s
[2800/4000]	[L1: 8516.8604]	10.5+28.2s
[3200/4000]	[L1: 7524.1738]	10.3+26.7s
[3600/4000]	[L1: 6745.6382]	10.3+25.8s
[4000/4000]	[L1: 6113.0771]	10.3+25.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[1600/16000]	[L1: 48831.4414]	51.1+123.4s
[3200/16000]	[L1: 26249.8574]	36.9+116.8s
[4800/16000]	[L1: 18170.9395]	37.1+113.5s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 47821.7500]	37.0+85.9s
[800/4000]	[L1: 25504.7070]	32.9+76.2s
[1200/4000]	[L1: 17631.6582]	31.7+73.3s
[1600/4000]	[L1: 13564.3574]	30.6+71.2s
[2000/4000]	[L1: 11050.8281]	30.4+71.4s
[2400/4000]	[L1: 9340.4336]	30.3+71.7s
[2800/4000]	[L1: 8097.5356]	30.5+71.3s
[3200/4000]	[L1: 7150.3042]	30.6+71.3s
[3600/4000]	[L1: 6404.5322]	30.4+71.2s
[4000/4000]	[L1: 5797.7261]	30.6+71.1s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[800/8000]	[L1: 52088.4531]	31.5+67.1s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[1600/16000]	[L1: 48831.4453]	42.2+129.6s
[3200/16000]	[L1: 26249.8574]	28.3+121.5s
[4800/16000]	[L1: 18170.9414]	28.1+118.2s
[6400/16000]	[L1: 13970.3213]	28.2+122.9s
[8000/16000]	[L1: 11371.4463]	28.2+116.1s
[9600/16000]	[L1: 9594.7764]	28.9+121.9s
[11200/16000]	[L1: 8301.9453]	28.5+122.1s
[12800/16000]	[L1: 7318.4873]	28.3+122.3s
[14400/16000]	[L1: 6541.9849]	28.2+130.2s
[16000/16000]	[L1: 5916.9741]	28.3+117.1s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): adder2d()
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 16.0046]	7.6+46.7s
[800/4000]	[L1: 11.8602]	3.8+38.5s
[1200/4000]	[L1: 10.0368]	3.8+35.5s
[1600/4000]	[L1: 9.1271]	3.8+31.8s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): depthwise_separable_conv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
        (pointwise): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[1600/16000]	[L1: 13.6830]	18.5+151.0s
[3200/16000]	[L1: 9.7590]	4.2+134.8s
[4800/16000]	[L1: 8.2456]	4.2+141.3s
[6400/16000]	[L1: 7.5357]	4.2+140.0s
[8000/16000]	[L1: 7.0066]	4.2+135.5s
[9600/16000]	[L1: 6.7010]	4.1+138.8s
[11200/16000]	[L1: 6.4779]	4.2+145.7s
[12800/16000]	[L1: 6.2201]	4.3+127.1s
[14400/16000]	[L1: 6.0338]	4.2+140.3s
[16000/16000]	[L1: 5.9037]	4.2+121.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[200/1600]	[L1: 1495622272.0000]	210.6+112.3s
[400/1600]	[L1: 1146180608.0000]	670.0+110.6s
[600/1600]	[L1: 984211136.0000]	680.6+117.1s
[800/1600]	[L1: 873381120.0000]	212.5+110.6s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): adder2d()
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): adder2d()
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (abc): Sequential(
        (0): Power_Activation()
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 38.6858]	22.2+74.0s
[800/4000]	[L1: 34.5333]	9.2+48.7s
[1200/4000]	[L1: 33.2920]	9.2+48.5s
[1600/4000]	[L1: 33.0080]	9.3+34.5s
[2000/4000]	[L1: 32.6329]	9.2+34.6s
[2400/4000]	[L1: 32.6296]	9.5+40.7s
[2800/4000]	[L1: 32.0757]	9.2+28.1s
[3200/4000]	[L1: 31.4218]	9.8+31.2s
[3600/4000]	[L1: 31.0100]	19.0+34.0s
[4000/4000]	[L1: 30.7762]	9.2+40.2s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 206.4305]	57.4+134.8s
[800/4000]	[L1: 146.0795]	45.6+118.7s
[1200/4000]	[L1: 121.1769]	45.5+118.9s
[1600/4000]	[L1: 107.5964]	45.5+118.9s
[2000/4000]	[L1: 99.3125]	45.5+118.9s
[2400/4000]	[L1: 93.8948]	45.5+118.9s
[2800/4000]	[L1: 89.9021]	45.5+118.9s
[3200/4000]	[L1: 86.6363]	45.5+118.9s
[3600/4000]	[L1: 83.9204]	45.5+118.9s
[4000/4000]	[L1: 81.7691]	45.5+118.9s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 9721.1924]	35.2+42.2s
[800/4000]	[L1: 6016.3926]	34.3+33.0s
[1200/4000]	[L1: 4395.5410]	34.3+33.0s
[1600/4000]	[L1: 3475.9812]	34.4+33.1s
[2000/4000]	[L1: 2880.7842]	34.5+33.2s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 35259.6133]	42.1+37.2s
[800/4000]	[L1: 28900.3359]	40.6+27.1s
[1200/4000]	[L1: 24031.0312]	40.7+27.3s
[1600/4000]	[L1: 20215.2168]	40.7+27.3s
[2000/4000]	[L1: 17107.5918]	40.7+27.3s
[2400/4000]	[L1: 14578.3467]	40.7+27.3s
[2800/4000]	[L1: 12569.6143]	40.7+27.3s
[3200/4000]	[L1: 11011.7979]	40.7+27.4s
[3600/4000]	[L1: 9796.5107]	40.7+27.3s
[4000/4000]	[L1: 8823.8818]	40.6+27.4s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1))
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 38.3807]	6.7+62.3s
[800/4000]	[L1: 34.3350]	3.3+41.7s
[1200/4000]	[L1: 32.8694]	3.3+57.6s
[1600/4000]	[L1: 31.8948]	3.3+47.1s
[2000/4000]	[L1: 31.5067]	3.3+51.5s
[2400/4000]	[L1: 31.4000]	3.3+43.7s
[2800/4000]	[L1: 30.9599]	3.3+47.3s
[3200/4000]	[L1: 30.5738]	3.3+45.4s
[3600/4000]	[L1: 30.3287]	3.3+44.2s
[4000/4000]	[L1: 30.0242]	3.3+39.3s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 36.6129]	40.2+37.7s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 538.5505]	52.4+132.5s
[800/4000]	[L1: 453.4482]	46.3+120.4s
[1200/4000]	[L1: 378.8526]	45.8+119.4s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 515.6943]	46.6+127.2s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 536.3326]	25.3+71.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 207.3597]	28.7+69.4s
[800/4000]	[L1: 146.6382]	24.2+60.8s
[1200/4000]	[L1: 120.9978]	24.2+60.9s
[1600/4000]	[L1: 107.4194]	24.2+60.8s
[2000/4000]	[L1: 99.0086]	24.2+60.8s
[2400/4000]	[L1: 93.2465]	24.2+61.0s
[2800/4000]	[L1: 89.1956]	24.2+61.1s
[3200/4000]	[L1: 85.8813]	24.3+61.1s
[3600/4000]	[L1: 83.4586]	24.3+61.3s
[4000/4000]	[L1: 81.5694]	24.4+61.2s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): depthwise_separable_conv(
          (depthwise): adder2d()
          (pointwise): adder2d()
        )
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): depthwise_separable_conv(
      (depthwise): adder2d()
      (pointwise): adder2d()
    )
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 9746.7695]	18.1+33.3s
[800/4000]	[L1: 6023.2754]	15.2+22.3s
[1200/4000]	[L1: 4399.6636]	15.3+22.5s
[1600/4000]	[L1: 3480.6106]	15.3+22.6s
[2000/4000]	[L1: 2884.4099]	15.3+22.6s
[2400/4000]	[L1: 2466.7444]	15.3+22.6s
[2800/4000]	[L1: 2156.4893]	15.3+23.0s
[3200/4000]	[L1: 1916.5941]	15.4+23.5s
[3600/4000]	[L1: 1725.4670]	15.3+24.5s
[4000/4000]	[L1: 1569.6456]	15.3+22.6s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 209.0891]	26.1+70.9s
[800/4000]	[L1: 147.9885]	23.9+61.0s
[1200/4000]	[L1: 122.5952]	24.0+61.1s
[1600/4000]	[L1: 108.8594]	23.9+61.1s
[2000/4000]	[L1: 99.9792]	24.0+61.2s
[2400/4000]	[L1: 94.2391]	24.1+61.5s
[2800/4000]	[L1: 89.9156]	24.0+61.6s
[3200/4000]	[L1: 86.8461]	24.1+61.6s
[3600/4000]	[L1: 84.2296]	24.1+61.6s
[4000/4000]	[L1: 82.0861]	24.2+61.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 208.5742]	45.5+78.4s
[800/4000]	[L1: 147.4804]	27.3+67.0s
[1200/4000]	[L1: 121.5250]	27.3+67.1s
[1600/4000]	[L1: 107.8264]	27.3+67.1s
[2000/4000]	[L1: 99.3455]	27.3+67.1s
[2400/4000]	[L1: 93.5248]	27.4+67.4s
[2800/4000]	[L1: 89.4324]	27.4+67.6s
[3200/4000]	[L1: 86.0819]	27.5+67.6s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): adder2d()
        (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): adder2d()
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): ReLU(inplace=True)
        (8): adder2d()
        (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 207.9035]	55.1+138.6s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): adder2d()
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 209.0891]	25.3+70.1s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU(inplace=True)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 211.1788]	6.4+43.5s
[800/4000]	[L1: 149.6691]	3.4+31.6s
[1200/4000]	[L1: 123.6690]	3.4+39.3s
[1600/4000]	[L1: 109.6793]	3.4+43.3s
[2000/4000]	[L1: 100.9053]	3.4+42.7s
[2400/4000]	[L1: 94.3955]	3.4+37.7s
[2800/4000]	[L1: 90.0189]	3.4+36.7s
[3200/4000]	[L1: 86.5925]	3.4+38.3s
[3600/4000]	[L1: 84.1352]	3.4+39.4s
[4000/4000]	[L1: 82.1818]	3.4+29.5s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential()
    )
    (1): ResBlock(
      (body): Sequential()
    )
    (2): ResBlock(
      (body): Sequential()
    )
    (3): ResBlock(
      (body): Sequential()
    )
    (4): ResBlock(
      (body): Sequential()
    )
    (5): ResBlock(
      (body): Sequential()
    )
    (6): ResBlock(
      (body): Sequential()
    )
    (7): ResBlock(
      (body): Sequential()
    )
    (8): ResBlock(
      (body): Sequential()
    )
    (9): ResBlock(
      (body): Sequential()
    )
    (10): ResBlock(
      (body): Sequential()
    )
    (11): ResBlock(
      (body): Sequential()
    )
    (12): ResBlock(
      (body): Sequential()
    )
    (13): ResBlock(
      (body): Sequential()
    )
    (14): ResBlock(
      (body): Sequential()
    )
    (15): ResBlock(
      (body): Sequential()
    )
    (16): adder2d()
    (17): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 207.9451]	4.1+40.3s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential(
    (0): adder2d()
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 208.4454]	3.7+40.8s
[800/4000]	[L1: 148.2290]	2.1+34.1s
[1200/4000]	[L1: 122.7318]	2.1+37.7s
[1600/4000]	[L1: 108.9796]	2.2+33.9s
[2000/4000]	[L1: 100.3506]	2.1+33.6s
[2400/4000]	[L1: 93.9195]	2.1+33.6s
[2800/4000]	[L1: 89.5962]	2.1+32.4s
[3200/4000]	[L1: 86.2155]	2.1+37.6s
[3600/4000]	[L1: 83.7944]	2.1+38.6s
[4000/4000]	[L1: 81.8838]	2.1+32.1s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 206.0158]	1.7+43.1s
[800/4000]	[L1: 146.4818]	0.8+32.3s
[1200/4000]	[L1: 120.8383]	0.8+35.9s
[1600/4000]	[L1: 107.3695]	0.8+39.1s
[2000/4000]	[L1: 99.0160]	0.8+38.0s
[2400/4000]	[L1: 93.3829]	0.8+32.3s
[2800/4000]	[L1: 89.1818]	0.8+33.2s
[3200/4000]	[L1: 85.9573]	0.8+32.5s
[3600/4000]	[L1: 83.4945]	0.8+38.8s
[4000/4000]	[L1: 81.3093]	0.8+39.7s

Evaluation:
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential()
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential()
  (tail): Sequential(
    (0): adder2d()
    (1): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 60.3902]	2.6+40.7s
[800/4000]	[L1: 61.2972]	0.4+33.8s
[1200/4000]	[L1: 60.9653]	0.4+36.2s
[1600/4000]	[L1: 60.7357]	0.4+34.5s
[2000/4000]	[L1: 61.1452]	0.4+34.6s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 60.3902]	7.8+62.4s
[800/4000]	[L1: 61.2972]	0.4+40.2s
[1200/4000]	[L1: 60.9653]	0.4+42.1s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): adder2d()
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): adder2d()
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
[400/4000]	[L1: 206.0158]	5.4+53.7s
[800/4000]	[L1: 146.4818]	0.9+39.4s
EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential()
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(True, True))
      (1): PixelShuffle(upscale_factor=2)
      (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Power_Activation()
  )
)
[Epoch 1]	Learning rate: 3.00e-3
